name: az-deploy
on:
  workflow_call:
    inputs:
      test_suite:
        type: string
        description: 'Select deployment/test suite to execute'
        required: true
      location:
        type: string
        description: 'Deployment location'
        required: true
      resource_group_name:
        type: string
        description: 'Resource group name'
        required: true
      deploy:
        type: boolean
        description: 'Deploy resources'
        required: false
        default: true
      cleanup:
        type: boolean
        description: 'Cleanup resources'
        required: false
        default: true
  workflow_dispatch:
    # ensure inputs are same as workflow_call.inputs
    inputs:
      test_suite:
        type: choice
        description: 'Select deployment/test suite to execute'
        required: true
        default: minimal
        options:
        - azfinsim-linux
        - azfinsim-windows
        - secured-batch
        - vizer
      location:
        type: string
        description: 'Deployment location'
        required: true
      resource_group_name:
        type: string
        description: 'Resource group name'
        required: true
      deploy:
        type: boolean
        description: 'Deploy resources'
        required: false
        default: true
      cleanup:
        type: boolean
        description: 'Cleanup resources'
        required: false
        default: true
permissions:
  # these are needed for azure login with OIDC
  contents: read
  id-token: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: azure
    outputs:
      SB_DEPLOYMENT_CONFIG: ${{ steps.prepare.outputs.SB_DEPLOYMENT_CONFIG }}
      SB_DEPLOYMENT_ENABLE_CONTAINERS: ${{ steps.prepare.outputs.SB_DEPLOYMENT_ENABLE_CONTAINERS }}
      SB_DEPLOYMENT_ENABLE_PACKAGES: ${{ steps.prepare.outputs.SB_DEPLOYMENT_ENABLE_PACKAGES }}
      SB_JUMPBOX_RESOURCE_GROUP_NAME: ${{ steps.process.outputs.SB_JUMPBOX_RESOURCE_GROUP_NAME }}
      SB_JUMPBOX_NAME: ${{ steps.process.outputs.SB_JUMPBOX_NAME }}
    steps:
      - name: prepare deployment configuration
        id: prepare
        run: |
          echo "SB_DEPLOYMENT_CONFIG=${{ inputs.test_suite }}" >> $GITHUB_OUTPUT
          case "${{ inputs.test_suite }}" in
            azfinsim-linux)
              echo "SB_DEPLOYMENT_ENABLE_CONTAINERS=true" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_PACKAGES=false" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_EXTRA_PARAMETERS=\"enableApplicationContainers=true\"" >> $GITHUB_OUTPUT
              echo "SB_FAIL_ON_STD_ERR=true" >> $GITHUB_OUTPUT
              ;;

            azfinsim-windows)
              echo "SB_DEPLOYMENT_ENABLE_CONTAINERS=false" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_PACKAGES=false" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_EXTRA_PARAMETERS=\"\"" >> $GITHUB_OUTPUT
              echo "SB_FAIL_ON_STD_ERR=true" >> $GITHUB_OUTPUT
              ;;

            secured-batch)
              echo "SB_DEPLOYMENT_ENABLE_CONTAINERS=true" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_PACKAGES=false" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_EXTRA_PARAMETERS=batchServiceObjectId=${{ secrets.AZ_BATCH_SERVICE_OBJECT_ID }} adminPassword=${{ secrets.AZ_JUMPBOX_PASSWORD }} enableWindowsJumpbox=false" >> $GITHUB_OUTPUT
              echo "SB_FAIL_ON_STD_ERR=false" >> $GITHUB_OUTPUT
              ;;

            vizer)
              echo "SB_DEPLOYMENT_ENABLE_CONTAINERS=false" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_PACKAGES=false" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_EXTRA_PARAMETERS=" >> $GITHUB_OUTPUT
              echo "SB_FAIL_ON_STD_ERR=true" >> $GITHUB_OUTPUT
              ;;
          esac
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: azure/login@v1
        if: inputs.deploy
        with:
          client-id: ${{ secrets.AZ_CLIENT_ID }}
          tenant-id: ${{ secrets.AZ_TENANT_ID }}
          subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      - uses: azure/arm-deploy@v1
        if: inputs.deploy
        with:
          scope: subscription
          subscriptionId: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          region: ${{ inputs.location }}
          template: examples/${{ inputs.test_suite }}/deployment.bicep
          deploymentName: dpl-${{ inputs.resource_group_name }}-${{ github.run_id }}
          parameters: resourceGroupName=${{ inputs.resource_group_name }} tags="{'github-action':'1', 'github-run-id':'${{ github.run_id }}'}" ${{ steps.prepare.outputs.SB_DEPLOYMENT_EXTRA_PARAMETERS }}
          failOnStdErr: ${{ steps.prepare.outputs.SB_FAIL_ON_STD_ERR }}
      - name: process outputs
        id: process
        if: inputs.deploy
        run: |
          deployment_name="dpl-${{ inputs.resource_group_name }}-${{ github.run_id }}"
          az deployment sub show -n $deployment_name --query properties.outputs
          hubRG=$(az deployment sub show -n $deployment_name --query "properties.outputs.hubResourceGroupName.value" -o tsv)
          hubPrefix=$(az deployment sub show -n $deployment_name --query "properties.outputs.hubPrefix.value" -o tsv)
          echo "SB_JUMPBOX_RESOURCE_GROUP_NAME=$hubRG" >> $GITHUB_OUTPUT
          echo "SB_JUMPBOX_NAME=dev-${hubPrefix}-vm-linux" >> $GITHUB_OUTPUT
  test:
    runs-on: ubuntu-latest
    environment: azure
    needs: deploy
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake
        cmake --version
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
    - name: Install CLI Python package
      run: |
        python3.8 -m pip install --upgrade pip
        python3.8 -m pip install ./cli
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZ_CLIENT_ID }}
        tenant-id: ${{ secrets.AZ_TENANT_ID }}
        subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
    - name: Run tests
      run: |
        [[ '${{ needs.deploy.outputs.SB_DEPLOYMENT_ENABLE_CONTAINERS }}' == 'true' ]] && enable_containers=ON || enable_containers=OFF
        [[ '${{ needs.deploy.outputs.SB_DEPLOYMENT_ENABLE_PACKAGES }}' == 'true' ]] && enable_packages=ON || enable_packages=OFF
        ctest -V                                                                                                  \
          -D SB_SUBSCRIPTION_ID:STRING=${{ secrets.AZ_SUBSCRIPTION_ID }}                                          \
          -D SB_TEST_SUITE:STRING=${{ inputs.test_suite }}                                                        \
          -D SB_RESOURCE_GROUP_NAME:STRING=${{ inputs.resource_group_name }}                                      \
          -D SB_JUMPBOX_RESOURCE_GROUP_NAME:STRING=${{ needs.deploy.outputs.SB_JUMPBOX_RESOURCE_GROUP_NAME }}     \
          -D SB_JUMPBOX_NAME:STRING=${{ needs.deploy.outputs.SB_JUMPBOX_NAME }}                                   \
          -D SB_CONFIG:STRING=${{ needs.deploy.outputs.SB_DEPLOYMENT_CONFIG }}                                    \
          -D SB_SUPPORTS_ACR:BOOL=$enable_containers                                                              \
          -D SB_SUPPORTS_PACKAGES:BOOL=$enable_packages                                                           \
          -D CTEST_BUILD_NAME:STRING='${{ github.ref_name }}-[${{ inputs.test_suite }}]-${{ inputs.location }}'   \
          -D CTEST_SITE:STRING=github-ci                                                                          \
          -D CTEST_SOURCE_DIRECTORY:PATH=./tests                                                                  \
          -D CTEST_BINARY_DIRECTORY:PATH=./build                                                                  \
          -S ./.github/ci/ctest.cmake
  cleanup:
    runs-on: ubuntu-latest
    environment: azure
    if: always() && inputs.cleanup
    needs: [deploy, test]
    steps:
      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZ_CLIENT_ID }}
          tenant-id: ${{ secrets.AZ_TENANT_ID }}
          subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      - name: cleanup
        run: |
          deployment_name="dpl-${{ inputs.resource_group_name }}-${{ github.run_id }}"
          resource_groups=$(az deployment sub show --name $deployment_name --query "properties.outputs.resourceGroups.value[]" -o tsv)
          while IFS= read -r rg_name; do
            echo "Deleting resource group: $rg_name"
            az group delete --name $rg_name --yes
          done <<< "$resource_groups"
